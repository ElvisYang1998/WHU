data_problem2 <- flights %>%
filter(!is.na(dep_time)) %>%
mutate(dep_interval = ifelse(dep_time >= 601 & dep_time <= 1200,"morning",
ifelse(dep_time >= 1201&dep_time <= 1800, "afternoon",
ifelse(dep_time >= 1801&dep_time <= 2400, "eve",
ifelse(dep_time >= 1&dep_time <= 600, "night", NA))))) %>%
group_by(year, month, day, dep_interval) %>%
summarise(
aver_delay = mean(dep_delay),
var_delay = var(dep_delay),
num_airport = length(unique(dest)))
data_problem2 %>%
filter(aver_delay <= 30 & num_airport >= 50)%>%
arrange(desc(aver_delay)) %>%
left_join(flights) %>%
select(year, month, day, contains("dep"), contains("arr")) %>%
head(10)
flights %>%
right_join(planes, by = 'tailnum') %>%
group_by(model) %>%
summarise(mean(year.y, na.rn = T)) %>%
head(10)
top10_dest <- flights %>%
group_by(dest) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(10)
avg_dep_delay <- flights %>%
group_by(dest) %>%
summarise(avg_dep_delay = mean(dep_delay,na.rm = T))
dest_delay <- inner_join(top10_dest, avg_dep_delay, by = 'dest')
ggplot(dest_delay, aes(x = dest, y = avg_dep_delay)) +
geom_point()+
geom_line()
prime_num <- function(x) {
if (x == 2){
return(2)
}else if(x > 2){
half = floor(sqrt(x)) + 1 #开方减少运算次数，因为大因子乘小因子，只用看一半
num = 0
for (i in 2:half) {
if (x %% i == 0) {
num = num + 1
}
}
if (num == 0) {
return(x)
}
}
}
total_num <- function(x){
all = c()
for (i in 2:x) {
all = c(all, prime_num(i))
}
return(all)
}
prime = total_num(1000)
t = last(seq_along(prime))
num = data.frame()
for (i in seq_along(prime)) {
for (j in seq_along(prime)) {
couple = c(prime[i],prime[j])
num = rbind(num,couple)
}
}
result = data.frame()
for (i in 1:nrow(num)) {
if(num[i,1] != num[i,2]){
for (j in 2:1000){
if (num[i,1] + sum(num[i,2]) == j) {
unit = c(j, num[i,1], num[i,2])
result = rbind(result, unit)
}
}
}
}
end = data.frame()
for (i in 1:1000) {
n = 0
m = data.frame()
for (j in 1:nrow(result)) {
if (i == result[j,1]) {
o = result[j,]
m = rbind(m, o)
n = n + 1
}
}
if ((n <= 2) &(n > 0)) {
end = cbind(end, m)
}
}
end
result
View(end)
View(result)
result
result
View(result)
total_num(100)
class(1)
typeof(1)
typeof(1:10)
class(1:10)
c <- data.frame
c
c <- data.frame()
class(c)
typeof(c)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
data_problem2 <- flights %>%
filter(!is.na(dep_time)) %>%
mutate(dep_interval = ifelse(dep_time >= 601 & dep_time <= 1200,"morning",
ifelse(dep_time >= 1201&dep_time <= 1800, "afternoon",
ifelse(dep_time >= 1801&dep_time <= 2400, "eve",
ifelse(dep_time >= 1&dep_time <= 600, "night", NA))))) %>%
group_by(year, month, day, dep_interval) %>%
summarise(
aver_delay = mean(dep_delay),
var_delay = var(dep_delay),
num_airport = length(unique(dest)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
data_problem2 <- flights %>%
filter(!is.na(dep_time)) %>%
mutate(dep_interval = ifelse(dep_time >= 601 & dep_time <= 1200,"morning",
ifelse(dep_time >= 1201&dep_time <= 1800, "afternoon",
ifelse(dep_time >= 1801&dep_time <= 2400, "eve",
ifelse(dep_time >= 1&dep_time <= 600, "night", NA))))) %>%
group_by(year, month, day, dep_interval) %>%
summarise(
aver_delay = mean(dep_delay),
var_delay = var(dep_delay),
num_airport = length(unique(dest)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
flights_planes <- flights %>%
left_join(planes, by = 'tailnum')
flights_planes <- select(flights_planes, tailnum, contains('W'),everything())
flights_sum <- flights_planes %>%
filter(!is.na(engines)) %>%
filter(!is.na(seats)) %>%
group_by(engines, seats) %>%
summarise(sum_distance = sum(distance, na.rm = T),
sum_arr_delay = sum(arr_delay, na.rm = T))
flights_sum %>%
summarise(sum(sum_arr_delay),
sum(sum_distance))
data_problem2 <- flights %>%
filter(!is.na(dep_time)) %>%
mutate(dep_interval = ifelse(dep_time >= 601 & dep_time <= 1200,"morning",
ifelse(dep_time >= 1201&dep_time <= 1800, "afternoon",
ifelse(dep_time >= 1801&dep_time <= 2400, "eve",
ifelse(dep_time >= 1&dep_time <= 600, "night", NA))))) %>%
group_by(year, month, day, dep_interval) %>%
summarise(
aver_delay = mean(dep_delay),
var_delay = var(dep_delay),
num_airport = length(unique(dest)))
data_problem2 %>%
filter(aver_delay <= 30 & num_airport >= 50)%>%
arrange(desc(aver_delay)) %>%
left_join(flights) %>%
select(year, month, day, contains("dep"), contains("arr")) %>%
head(10)
flights %>%
right_join(planes, by = 'tailnum') %>%
group_by(model) %>%
summarise(mean(year.y, na.rn = T)) %>%
head(10)
top10_dest <- flights %>%
group_by(dest) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(10)
avg_dep_delay <- flights %>%
group_by(dest) %>%
summarise(avg_dep_delay = mean(dep_delay,na.rm = T))
dest_delay <- inner_join(top10_dest, avg_dep_delay, by = 'dest')
ggplot(dest_delay, aes(x = dest, y = avg_dep_delay)) +
geom_point()+
geom_line()
prime_num <- function(x) {
if (x == 2){
return(2)
}else if(x > 2){
half = floor(sqrt(x)) + 1 #开方减少运算次数，因为大因子乘小因子，只用看一半
num = 0
for (i in 2:half) {
if (x %% i == 0) {
num = num + 1
}
}
if (num == 0) {
return(x)
}
}
}
total_num <- function(x){
all = c()
for (i in 2:x) {
all = c(all, prime_num(i))
}
return(all)
}
prime = total_num(1000)
t = last(seq_along(prime))
num = data.frame()
for (i in seq_along(prime)) {
for (j in seq_along(prime)) {
couple = c(prime[i],prime[j])
num = rbind(num,couple)
}
}
result = data.frame()
for (i in 1:nrow(num)) {
if(num[i,1] != num[i,2]){
for (j in 2:1000){
if (num[i,1] + sum(num[i,2]) == j) {
unit = c(j, num[i,1], num[i,2])
result = rbind(result, unit)
}
}
}
}
flights %>%
filter(!is.na(dep_time)) %>%
p <- flights$dep_time
p
flights %>%
filter(!is.na(dep_time)) %>%
mutate(sb = cut(c(0,600,1200,1800,2400), c('a','v','b','n','m')))
c(T,'q')
c(T,1)
as.logical(9)
as.logical(-1)
as.logical(0)
c(-1,1
gss_cat
gss_cat[relig]
gss_cat['relig']
levels(gss_cat['relig'])
unique(gss_cat['relig'])
help("print")
gss_cat %>%
mutate(relig = fct_lump(relig, n = 10)) %>%
count(relig, sort = T)
gss_cat %>%
mutate(relig = fct_lump(relig, n = 10)) %>%
count(relig, sort = T) %>%
print(n = Inf)
gss_cat %>%
mutate(relig = fct_lump(relig, n = 10)) %>%
count(relig, sort = T) %>%
print()
help("facet_grid")
help("facet_wrap")
dest_delay <- inner_join(top10_dest, avg_dep_delay, by = 'dest')
ggplot(dest_delay, aes(x = dest, y = avg_dep_delay)) +
geom_point()+
geom_line(group = 1)
parse_double('8$8', locale = locale(decimal_mark = '$'))
parse_double('8,8', locale = locale(decimal_mark = ','))
parse_double('8?8', locale = locale(decimal_mark = '?'))
parse_double('8,8', locale = locale(decimal_mark = ','))
writeLines('1')
typeof(writeLines('1'))
str_c(c("x","y","z"),sep = ",")
ls("package:stringr",pattern="^str.+")
matrix(1:100, nrow = 5)
a <- matrix(1:100, nrow = 5)
data.frame(a)
a <- data.frame(a)
a
a[[1]]
a[1]
a[1][1]
a[1][1,]
a[1][1,][1]
a[1][1,]
typeof(matrix(1:100, nrow = 5))
typeof(matrix(c(1,2,3,4,5), nrow = 5))
help(typeof)
typeof(matrix())
typeof(data.frame()
)
a <- matrix(1:100, nrow = 5)
a <- data.frame(a)
a
a[[1]]
a[[1]]
a$X1
a[[1,]]
a[1,]
a[3,3]
a[c(3,4),5]
subset(a, a<3)
diamonds %>%
temp = 10
cut(10, c(-Inf, 10, 20, 30, Inf), c('a', 'b', 'c', 'v', 'b'))
cut(10, c(-Inf, 10, 20, 30, Inf), labels = c('a', 'b', 'c', 'v', 'b'))
cut(10, c(-Inf, 10, 20, 30, Inf), labels = c('a', 'b', 'c', 'v'))
cut(10, c(-Inf, 10, 20, 30, Inf), labels = c('a', 'b', 'c', 'v'), right = F)
max(diamonds$cut)
max(diamonds$depth)
range(diamonds$depth)
diamonds[[1]]
diamonds[[1,]]
a
a[[1]]
typeof(a[[1]])
typeof(data.frame())
(T,T,T) == (F,T,F)
c(T,T,T) == c(F,T,F)
if(c(T,T,T) == c(F,T,F))
str_c(c(T,T,T))
str_c(c(T,T,T), collapse = '/')
str_c(c(T,T,T), dep = '/')
str_c(c(T,T,T), dep = '   ')
ls("package:stringr",pattern="^str.+")
seq_along(1:10000)
seq_along(10000)
1:10
typeof(seq_along(11))
map_logical(a, a + 1)
map_dbl(a, a + 1)
map_dbl(a, )
map_dbl(a )
map_dbl(a , mean)
help(map_dbl)
a.T
inv(a)
t(a)
map_dbl(t(a), mean)
a <- t(a)
map_dbl(a, mean)
a
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
install.packages("xts")
library(zoo)
q()
help(optim)
length('ycyzdh傻')
length('hch')
length('hchewfewf')
length("hchewfewf")
length("hchewfewf sd")
?length
str_length('dasd')
library(stringr)
str_length('dasd')
str_length('ycyzdh傻')
install.packages("IntroCompFinR")
install.packages("install.packages("IntroCompFinR")")
install.packages("IntroCompFinR")
install.packages("IntroCompFinR", repos="http://R-Forge.R-project.org")
library(IntroCompFinR)
?dimnames()
# construct the data
asset.names = c("MSFT", "NORD", "SBUX")
er = c(0.0427, 0.0015, 0.0285)
names(er) = asset.names
covmat = matrix(c(0.0100, 0.0018, 0.0011,
0.0018, 0.0109, 0.0026,
0.0011, 0.0026, 0.0199),
nrow=3, ncol=3)
r.free = 0.005
dimnames(covmat) = list(asset.names, asset.names)
# tangency portfolio
tan.port <- tangency.portfolio(er, covmat, r.free)
# compute global minimum variance portfolio
gmin.port = globalMin.portfolio(er, covmat)
# compute portfolio frontier
ef <- efficient.frontier(er, covmat, alpha.min=-2,
alpha.max=1.5, nport=20)
attributes(ef)
plot(ef)
plot(ef, plot.assets=TRUE, col="blue", pch=16)
points(gmin.port$sd, gmin.port$er, col="green", pch=16, cex=2)
points(tan.port$sd, tan.port$er, col="red", pch=16, cex=2)
text(gmin.port$sd, gmin.port$er, labels="GLOBAL MIN", pos=2)
text(tan.port$sd, tan.port$er, labels="TANGENCY", pos=2)
sr.tan = (tan.port$er - r.free)/tan.port$sd
abline(a=r.free, b=sr.tan, col="green", lwd=2)
covmat = matrix(c( 0.02313441,  0.01361721,  0.00422078,  0.01153283, -0.00056064,
0.01361721,  0.02085136,  0.0009617 ,  0.0078207 ,  0.00026613,
0.00422078,  0.0009617 ,  0.012321  ,  0.0024047 , -0.00143201,
0.01153283,  0.0078207 ,  0.0024047 ,  0.01833316, -0.00024954,
-0.00056064,  0.00026613, -0.00143201, -0.00024954,  0.03396649), nrow = 5, ncol = 5)
r.free = 0.032
er = c(12.94%,
12.42%,
5.40%,
9.44%,
10.05%)
# construct the data
asset.names = c('US Equity',	'Foreign Equity',	'Bonds',	'REITs',	'Commodities')
er = c(12.94/100,12.42/100, 5.40/100,9.44/100,10.05/100)
names(er) = asset.names
covmat = matrix(c( 0.02313441,  0.01361721,  0.00422078,  0.01153283, -0.00056064,
0.01361721,  0.02085136,  0.0009617 ,  0.0078207 ,  0.00026613,
0.00422078,  0.0009617 ,  0.012321  ,  0.0024047 , -0.00143201,
0.01153283,  0.0078207 ,  0.0024047 ,  0.01833316, -0.00024954,
-0.00056064,  0.00026613, -0.00143201, -0.00024954,  0.03396649), nrow = 5, ncol = 5)
r.free = 0.032
dimnames(covmat) = list(asset.names, asset.names)
# tangency portfolio
tan.port <- tangency.portfolio(er, covmat, r.free)
# compute global minimum variance portfolio
gmin.port = globalMin.portfolio(er, covmat)
# compute portfolio frontier
ef <- efficient.frontier(er, covmat, alpha.min=-2,
alpha.max=1.5, nport=20)
attributes(ef)
plot(ef)
plot(ef, plot.assets=TRUE, col="blue", pch=16)
points(gmin.port$sd, gmin.port$er, col="green", pch=16, cex=2)
points(tan.port$sd, tan.port$er, col="red", pch=16, cex=2)
text(gmin.port$sd, gmin.port$er, labels="GLOBAL MIN", pos=2)
text(tan.port$sd, tan.port$er, labels="TANGENCY", pos=2)
sr.tan = (tan.port$er - r.free)/tan.port$sd
abline(a=r.free, b=sr.tan, col="green", lwd=2)
# Topic: The Homework in Analysis of Time Series
# Name: YANG CHENYU
# Class: Financial Engineering 2
# Student ID:2016301550186
# load package----------------------------------------------
library(tseries)
library(lmtest)
library(tidyverse)
library(zoo)
library(forecast)
# set workspace----------------------------------------------
setwd('/Users/mac/Desktop/R_Time_Analysis/Homework 2')
# input data----------------------------------------------
data = read_csv('VIX1.csv')
# 1-------------------------------------------------------
sample_data <- filter(data, Date < as.Date('2005-1-1'))
sample_vix <- ts(sample_data$VIX, frequency = 52)
detrend_result <- stl(sample_vix, s.window = 'periodic')
detrend <- zoo(detrend_result$time.series, order.by = sample_data$Date)
clean_data <- detrend_result$time.series[,"remainder"]
plot(detrend)
# 2-------------------------------------------------------
plot(arma(clean_data,order = c(1,0))$fitted.values,main = 'AR(1)')
plot(arma(clean_data,order = c(0,1))$fitted.values,main = 'MA(1)')
plot(arma(clean_data,order = c(1,1))$fitted.values,main = 'ARMA(1,1)')
ar.model <- arima(clean_data,order = c(1,0,0))
ma.model <- arima(clean_data,order = c(0,0,1))
arma.model <- arima(clean_data, order =c(1,0,1))
# resulets I needed
ar.model$aic
ma.model$aic
arma.model$aic
actual <- zoo(clean_data,order.by = sample_data$Date)
fitted <- zoo(ar.model$fitted.values,order.by = sample_data$Date)
residual <- zoo(ar.model$residuals,order.by = sample_data$Date)
plot(actual, type = "l", ylim = c(-5, 5),main='AR.model',
ylab = "Actual(Fitted)",xlab = "time", lty = 2)
par(new = TRUE)
plot(fitted, type = "l", ylim = c(-5, 5),
ylab = "", xlab = "",lty = 3)
par(new = TRUE)
plot(residual,type="l",ylim = c(-2.5, 15),ylab = "", xlab = "",lty = 1, axes =FALSE)
axis(side = 4, at = c(seq(-2.5, 10.5, by = 1)), lab = c(seq(-2.5, 10.5,by = 1)),
ylab = "Residual", xlab = "")
legend("topleft", c("Actual","Residual", "Fitted" ), cex = 0.8,lty = c(2,1,3))
# 3-------------------------------------------------------
summary(ar.model)
forecast_data <- forecast(ar.model, h=47)
plot(forecast_data)
a = arma(clean_data,order = c(1,1))
a$residuals
zoo(a$residuals,order.by = sample_data$Date)
actual <- zoo(clean_data,order.by = sample_data$Date)
fitted <- zoo(ar.model$fitted.values,order.by = sample_data$Date)
residual <- zoo(arma(clean_data,order = c(1,1)),order.by = sample_data$Date)
actual <- zoo(clean_data,order.by = sample_data$Date)
fitted <- zoo(ar.model$fitted.values,order.by = sample_data$Date)
residual <- zoo(arma(clean_data,order = c(1,1))$residuals,order.by = sample_data$Date)
a = arma(clean_data,order = c(1,1))
plot(actual, type = "l", ylim = c(-5, 5),main='AR.model',
ylab = "Actual(Fitted)",xlab = "time", lty = 2)
par(new = TRUE)
plot(fitted, type = "l", ylim = c(-5, 5),
ylab = "", xlab = "",lty = 3)
par(new = TRUE)
plot(residual,type="l",ylim = c(-2.5, 15),ylab = "", xlab = "",lty = 1, axes =FALSE)
axis(side = 4, at = c(seq(-2.5, 10.5, by = 1)), lab = c(seq(-2.5, 10.5,by = 1)),
ylab = "Residual", xlab = "")
legend("topleft", c("Actual","Residual", "Fitted" ), cex = 0.8,lty = c(2,1,3))
plot(residual,type="l",ylim = c(-2.5, 15),ylab = "", xlab = "",lty = 1, axes =FALSE)
plot(fitted, type = "l", ylim = c(-5, 5),
ylab = "", xlab = "",lty = 3)
fitted <- zoo(arma(clean_data,order = c(1,1))$fitted.values,order.by = sample_data$Date)
plot(actual, type = "l", ylim = c(-5, 5),main='AR.model',
ylab = "Actual(Fitted)",xlab = "time", lty = 2)
par(new = TRUE)
plot(fitted, type = "l", ylim = c(-5, 5),
ylab = "", xlab = "",lty = 3)
par(new = TRUE)
plot(residual,type="l",ylim = c(-2.5, 15),ylab = "", xlab = "",lty = 1, axes =FALSE)
axis(side = 4, at = c(seq(-2.5, 10.5, by = 1)), lab = c(seq(-2.5, 10.5,by = 1)),
ylab = "Residual", xlab = "")
legend("topleft", c("Actual","Residual", "Fitted" ), cex = 0.8,lty = c(2,1,3))
